name: Deploy Love Reminder to AWS

on:
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: template-image-dev
  IMAGE_TAG: latest
  CLUSTER_NAME: template-cluster-dev
  SERVICE_NAME: template-ecs-service-dev
  ENVIRONMENT: dev

jobs:
  deploy:
    environment: dev
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Docker availability
        run: docker --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if it doesn't exist
        run: |
          echo "üì¶ Check if ECR '$ECR_REPOSITORY' exists..."
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region $AWS_REGION >/dev/null 2>&1 || {
            echo "üîß Repository not found. Creating '$ECR_REPOSITORY'..."
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" --region $AWS_REGION
          }
      - name: Login to Amazon ECR
        run: |
          echo "üîê Login in ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - name: Build, Tag, and Push Docker image to ECR
        run: |
          set -e
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "üîß Build image: $IMAGE_URI"
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $IMAGE_URI
          docker push $IMAGE_URI
      - name: Check if ECS service exists
        id: check-service
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "üîç Verificando existencia del servicio '$SERVICE_NAME' en el cl√∫ster '$CLUSTER_NAME'..."
          # Verifica que el cluster exista
          CLUSTERS=$(aws ecs list-clusters --region "$AWS_REGION" --output text)
          if ! echo "$CLUSTERS" | grep -q "$CLUSTER_NAME"; then
            echo "‚ùå El cl√∫ster '$CLUSTER_NAME' no existe."
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Obtiene todos los servicios del cluster
          SERVICE_ARNS=$(aws ecs list-services --cluster "$CLUSTER_NAME" --region "$AWS_REGION" --query "serviceArns[]" --output text)
          echo "üìã Servicios encontrados:"
          echo "$SERVICE_ARNS"
          SERVICE_EXISTS=false
          for ARN in $SERVICE_ARNS; do
            SERVICE_NAME_IN_ARN=$(basename "$ARN")
            if [ "$SERVICE_NAME_IN_ARN" = "$SERVICE_NAME" ]; then
              SERVICE_EXISTS=true
              break
            fi
          done
          echo "exists=$SERVICE_EXISTS" >> $GITHUB_OUTPUT
          if [ "$SERVICE_EXISTS" = true ]; then
            echo "‚úÖ Servicio encontrado: $SERVICE_NAME"
          else
            echo "‚ö†Ô∏è Servicio no encontrado: $SERVICE_NAME. Se proceder√° con el despliegue inicial."
          fi
      - name: Update ECS Service
        if: steps.check-service.outputs.exists == 'true'
        run: |
          echo "‚ôªÔ∏è Update ECS service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION || {
              echo "‚ùå Error in ECS service update."
              exit 1
            }
      - name: Deploy using Serverless Framework
        if: steps.check-service.outputs.exists == 'false'
        run: |
          echo "üöÄ Install Serverless CLI..."
          npm install -g serverless@3
          echo "üì¶ Deploying with Serverless..."
          serverless deploy --config serverless/serverless.yml --verbose --stage dev \
            --param "port=3000" \
            --param "expose_port=3000" \
            --param "vpc_id=${{ secrets.VPC_ID }}" \
            --param "subnet_id=${{ secrets.SUBNET_ID }}"