name: Deploy Love Reminder to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: template-image-prod
  IMAGE_TAG: latest
  CLUSTER_NAME: template-cluster-prod
  SERVICE_NAME: template-ecs-service-prod
  ENVIRONMENT: prod

jobs:
  deploy:
    environment: prod
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Docker availability
        run: docker --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if it doesn't exist
        run: |
          echo "üì¶ Check if ECR '$ECR_REPOSITORY' exists..."
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region $AWS_REGION >/dev/null 2>&1 || {
            echo "üîß Repository not found. Creating '$ECR_REPOSITORY'..."
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" --region $AWS_REGION
          }

      - name: Login to Amazon ECR
        run: |
          echo "üîê Login in ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Build, Tag, and Push Docker image to ECR
        run: |
          set -e
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"

          echo "üîß Build image: $IMAGE_URI"
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

          docker tag $ECR_REPOSITORY:$IMAGE_TAG $IMAGE_URI

          docker push $IMAGE_URI

      - name: Check if ECS service exists
        id: check-service
        run: |
          echo "üîç Check if service '$SERVICE_NAME' exists..."
          SERVICE_ARN=$(aws ecs list-services --cluster $CLUSTER_NAME --query "serviceArns[]" --output text)
          if echo "$SERVICE_ARN" | grep -q "$SERVICE_NAME"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Service found."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Service not found, deploying with Serverless."
          fi

      - name: Update ECS Service
        if: steps.check-service.outputs.exists == 'true'
        run: |
          echo "‚ôªÔ∏è Update ECS service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION || {
              echo "‚ùå Error in ECS service update."
              exit 1
            }

      - name: Deploy using Serverless Framework
        if: steps.check-service.outputs.exists == 'false'
        run: |
          echo "üöÄ Install Serverless CLI..."
          npm install -g serverless@3

          echo "üì¶ Deploying with Serverless..."
          serverless deploy --verbose \
            --param "stage=dev" \
            --param "port=3000" \
            --param "expose_port=3000" \
            --param "vpc_id=${{ secrets.VPC_ID }}" \
            --param "subnet_id=${{ secrets.SUBNET_ID }}"
